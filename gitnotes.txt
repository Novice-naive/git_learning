Git notes  https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424#0）
0. After apt-get install git, $git config --global user.name "Your Name"
    $ git config --global user.email "email@example.com"
1. First create the git depository by : $git init, in a directory
2. use $git add, to add (only one file) to git depository and then use
$git commit -m "2022.10.7-KeanShen-readme" to submit (all the adding file)
to the depository. information added after the -m could helpful when 
finding previous version of file. 
	Note: $git commit could only commit the added file!!!
	Note: if deleted or rename a file, use $git commit -a
	Note: since $git log could tell config name and time, don't
	      add these info in the $git commit -m
	Note: add only submit the file to "stage", commit submit the file to "master"
	      stage is the temporary storage place.  


时光机穿梭
3. use $git status, to check if there is modified but not commit files
4. use $git diff <filename>, to look up the modified content
5. use $git log, to see the previous submit history (has previous version)
6. use $git reflog, to see the command history and future version to jump 
7. use $git reset --hard <version_number> to jump to the previous or future
version of depository
	Note: version_number dont need to complete but at least first five bits
	Note: version_number could be HEAD^(last version), HEAD~100(100geqian)
8. $git checkout -- <file>  or  $git restore <file>  可以丢弃工作区的修改(撤销还未add的error)
    $git reset HEAD <file> or $git restore --staged <file> 可以把暂存区的修改撤销掉（unstage), 
重新放回工作区. 相当于回到了上一行的阶段。
9. $rm <file> then $git rm <file> then $git commit, could delete file from master


远程仓库
1. Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。而Github提供仓库托管服务，
可以免费获得Git远程仓库。
2. 由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以要用gitbash目录生成
SSH key：$ssh-keygen -t rsa -C "youremail@example.com"。一路回车后会生成id_rsa(密钥) 和
id_rsa.pub(公钥)。在github的account settings里add SSH key添加公钥即可。只要把每台电脑的
Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。 
    Note：gitbash生成ssh一定要在用户主目录即“C：USER/nianmounaweixiao/.ssh下生成！！！！
	在depository的目录下面生成的ssh是没用的！！！
3. 想要把本地库和github的远程库关联，在本地仓库下运行(origin 一般为远程库的别名)
    $git remote add origin git@github.com:<github username>/<github depository name>.git
    $git push -u origin master, 当前分支master推送到远程。(只有第一次push要加-u)
4. 想要解除和远程库的关联，先$git remote -v 查看远程库的信息，然后$ git remote rm <name>
5. 如果先有远程库，然后关联本地，用$git clone git@gitlab.oit.duke.edu:sl578/ece550d-autograder.git
    Note: git clone可以有多个地址，上面的是用ssh，还可以用http协议地址，不过很慢而且要每次输入口令


分支管理
0. 为什么需要create branch？？
    A. 当多人合作项目时，如果都在remote main(即master)分支上干活，相互之间会有影响
    B. 建立分支的意义就在于，相当于测试服，如果在正式服上面修bug，或者增加feature，影响正常程序。
    C. 如果新加一个feature，加到一半甲方说不要了，在branch上能直接删除branch，但是在main上改的
话，只能一个个文件删或者找上次的commit，相对麻烦
    D. 要不要建立branch在实际中要灵活使用，branch还可以当作main的子类使用。如ECE550的autograder
在main中写autograder的template，然后建立branch，每个branch相当于main的子类，增加一些不同的
testbench以及评分细则。这样的branch就不会merge到main上面去了，同时新的checkpoint
还能git pull main分支，然后修改。
    E. branch还能当作很多copy来使用，比如要写一个multithread的code，分别要2，4，8thread跑一遍。
这样就可以建立3个branch，每个branch分别写2，4，8thread的代码，然后这样有3个copy的代码，切换
一个branch就可以make一个代码跑一遍。
    F. branch commit后，如果不merge到main，则在main里输入git log不会有commit的记录，所以比如
要test一个功能或者debug，可以在branch里测，测完不对直接delete branch，不会有脏的记录。
    G. 如果没有分支，则要么选择果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。
如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

1. 实际开发中一般有几个branch？（这个不是固定的）
    在实际开发中，master分支应该是非常稳定的, 也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说, dev分支是不稳定的，到某个时候，比如1.0版本发布时，
再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，
每个人都从dev分支上建立feature分支修改，时不时地往dev分支上合并就可以了。hotfix分支，直接从
master上分支，热补丁，完成后merge到develop和master！！

2. branch，stage，remote，add，commit，HEAD之间的关联
    A. 你在本地的 feature 分支开发之后，add、commit，然后 push 到remote feature 分支，
这样是一个正确的开发流程。这样也可以保证即使你的本地磁盘损坏了，本地分支消失了，
也还可以重新从远程拉取分支，自己的开发工作不会白费。当你开发工作完成之后，你可以申请将远程
分支合并到 master 分支，这样自己的开发工作才告一段落。所以不会出现我在本地直接在dev开发分支上开发，
我每天都commit提交一次，没有推送到远程，提交的代码跟别人一点关系都没有，不影响其他人干活。

    B. 所有branch共用工作区（没add的）和暂存区（add后），但不共用commit！！！
正因为共用工作区，所以如果工作做到一半，但是要去别的分支改bug，如果直接switch，工作区就会
不干净，改bug的分支也会带有之前未完成的工作（包括未commit的，未add的，untracted的），
这样在bug分支也看到这些文件！！所以方法一是在原分支commit后去改bug，commit完的东西
只属于一个分支，bug分支就看不到了，但是因为工作只做到一半，commit会多一个脏记录，这样
$git log就会很乱，影响以后回溯。所以可以用$git stash，把工作区和暂存区存起来，这样既没有commit，
bug分支也看不到这些文件！！！！修完bug用$git stash pop复原。

    C. create branch相当于增加一个dev指针，然后把HEAD指向dev，表示当前分支，merge相当于
把main指针指向dev所指的位置。注意git记录的时修改的log，所以指针指向后面的修改，而不是copy
一份main的内容再指过去。（分支是指向commit的指针！！）
  

3. 解决冲突
    因为branch不共用commit，所以如果两个branch修改了相同的内容，就会冲突，不能自动merge，
可以通过git status看冲突的内容，手动修改冲突后才可以merge。note，有些修改可以自动merge，
比如A branch改了文件头，Bbranch改了文件尾，直接合并

4. branch相关指令
    A. $git checkout -b dev (-b 为建立并切换到branch)，相当于$git branch dev + $git checkout dev
Note : $git checkout -- <file>  or  $git restore <file>  可以丢弃工作区的修改(撤销还未add的error)
    B. $git switch （-c） dev  等同于$dit checkout （-b） dev
    C. $git branch 查看所有本地分支，带星号的时当前分支
    D. $git branch --remote 查看所有远程分支（origin/main）
    E. $git branch -d dev  删除dev分支   -D强制删除
    F. $git merge -m"message" dev  把dev分支合并到当前分支上面
    G. git log --graph能看分支合并情况
    H. $git stash 存储工作现场，
    I. $git stash list 查看stash内容
    J.  $git stash pop复原stash存储的工作现场并删除stash内容   $git stash apply, 复原但不删除










